// <auto-generated />
using System;
using CDatos.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDatos.Migrations
{
    [DbContext(typeof(KeProyectoContext))]
    partial class KeProyectoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.UTF-8")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CEntidades.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_CATEGORIA");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("CEntidades.Entidades.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProvincia")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_CIUDAD");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Ciudad");
                });

            modelBuilder.Entity("CEntidades.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ID_CLIENTE");

                    b.HasIndex("IdPersona")
                        .IsUnique()
                        .HasFilter("[IdPersona] IS NOT NULL");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("CEntidades.Entidades.Distribuidor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_DISTRIBUIDOR");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Distribuidor");
                });

            modelBuilder.Entity("CEntidades.Entidades.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Foto")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int>("IdSector")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ID_EMPLEADO");

                    b.HasIndex("IdPersona")
                        .IsUnique()
                        .HasFilter("[IdPersona] IS NOT NULL");

                    b.HasIndex("IdSector");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("CEntidades.Entidades.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_ID_ESTADO");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("CEntidades.Entidades.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_FACTURA");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaOrden")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int?>("IdFactura")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_ORDEN_DE_COMPRA");

                    b.HasIndex("IdEmpleado");

                    b.HasIndex("IdFactura")
                        .IsUnique()
                        .HasFilter("[IdFactura] IS NOT NULL");

                    b.ToTable("OrdenDeCompra");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeCompra_Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadProducto")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOrdenDeCompra")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdOrdenDeCompra");

                    b.HasIndex("IdProducto");

                    b.ToTable("OrdenDeCompra_Producto");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("DistribuidorId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdDistribuidor")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int?>("IdFactura")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_ORDEN_DE_VENTA");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdDistribuidor");

                    b.HasIndex("IdEmpleado");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdFactura")
                        .IsUnique()
                        .HasFilter("[IdFactura] IS NOT NULL");

                    b.ToTable("OrdenDeVenta");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeVenta_Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadProducto")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOrdenDeVenta")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdOrdenDeVenta");

                    b.HasIndex("IdProducto");

                    b.ToTable("OrdenDeVenta_Producto");
                });

            modelBuilder.Entity("CEntidades.Entidades.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Nro_Doc")
                        .HasColumnType("int");

                    b.Property<string>("Tipo_Doc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_PERSONA");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("CEntidades.Entidades.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PrecioProducto")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("UnidadesProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_PRODUCTO");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProveedor");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("CEntidades.Entidades.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_PROVEEDOR");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("CEntidades.Entidades.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_PROVINCIA");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("CEntidades.Entidades.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_SECTOR");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("CEntidades.Entidades.Ciudad", b =>
                {
                    b.HasOne("CEntidades.Entidades.Provincia", "Provincia")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("CEntidades.Entidades.Cliente", b =>
                {
                    b.HasOne("CEntidades.Entidades.Persona", "Persona")
                        .WithOne("Cliente")
                        .HasForeignKey("CEntidades.Entidades.Cliente", "IdPersona");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("CEntidades.Entidades.Distribuidor", b =>
                {
                    b.HasOne("CEntidades.Entidades.Ciudad", "Ciudad")
                        .WithMany("Distribuidores")
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("CEntidades.Entidades.Empleado", b =>
                {
                    b.HasOne("CEntidades.Entidades.Persona", "Persona")
                        .WithOne("Empleado")
                        .HasForeignKey("CEntidades.Entidades.Empleado", "IdPersona");

                    b.HasOne("CEntidades.Entidades.Sector", "Sector")
                        .WithMany("Empleados")
                        .HasForeignKey("IdSector")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeCompra", b =>
                {
                    b.HasOne("CEntidades.Entidades.Empleado", "Empleado")
                        .WithMany("OrdenesDeCompra")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Factura", "Factura")
                        .WithOne("OrdenDeCompra")
                        .HasForeignKey("CEntidades.Entidades.OrdenDeCompra", "IdFactura");

                    b.Navigation("Empleado");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeCompra_Producto", b =>
                {
                    b.HasOne("CEntidades.Entidades.OrdenDeCompra", null)
                        .WithMany()
                        .HasForeignKey("IdOrdenDeCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Producto", null)
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeVenta", b =>
                {
                    b.HasOne("CEntidades.Entidades.Cliente", "Cliente")
                        .WithMany("OrdenesDeVenta")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Distribuidor", "Distribuidor")
                        .WithMany("OrdenesDeVenta")
                        .HasForeignKey("IdDistribuidor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Empleado", "Empleado")
                        .WithMany("OrdenesDeVenta")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Estado", "Estado")
                        .WithMany("OrdenesDeVentas")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Factura", "Factura")
                        .WithOne("OrdenDeVenta")
                        .HasForeignKey("CEntidades.Entidades.OrdenDeVenta", "IdFactura");

                    b.Navigation("Cliente");

                    b.Navigation("Distribuidor");

                    b.Navigation("Empleado");

                    b.Navigation("Estado");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeVenta_Producto", b =>
                {
                    b.HasOne("CEntidades.Entidades.OrdenDeVenta", "OrdenDeVenta")
                        .WithMany("OrdenDeVenta_Productos")
                        .HasForeignKey("IdOrdenDeVenta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Producto", "Producto")
                        .WithMany("OrdenDeVenta_Productos")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrdenDeVenta");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("CEntidades.Entidades.Persona", b =>
                {
                    b.HasOne("CEntidades.Entidades.Ciudad", "Ciudad")
                        .WithMany("Personas")
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("CEntidades.Entidades.Producto", b =>
                {
                    b.HasOne("CEntidades.Entidades.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CEntidades.Entidades.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("CEntidades.Entidades.Proveedor", b =>
                {
                    b.HasOne("CEntidades.Entidades.Ciudad", "Ciudad")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("CEntidades.Entidades.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("CEntidades.Entidades.Ciudad", b =>
                {
                    b.Navigation("Distribuidores");

                    b.Navigation("Personas");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("CEntidades.Entidades.Cliente", b =>
                {
                    b.Navigation("OrdenesDeVenta");
                });

            modelBuilder.Entity("CEntidades.Entidades.Distribuidor", b =>
                {
                    b.Navigation("OrdenesDeVenta");
                });

            modelBuilder.Entity("CEntidades.Entidades.Empleado", b =>
                {
                    b.Navigation("OrdenesDeCompra");

                    b.Navigation("OrdenesDeVenta");
                });

            modelBuilder.Entity("CEntidades.Entidades.Estado", b =>
                {
                    b.Navigation("OrdenesDeVentas");
                });

            modelBuilder.Entity("CEntidades.Entidades.Factura", b =>
                {
                    b.Navigation("OrdenDeCompra");

                    b.Navigation("OrdenDeVenta");
                });

            modelBuilder.Entity("CEntidades.Entidades.OrdenDeVenta", b =>
                {
                    b.Navigation("OrdenDeVenta_Productos");
                });

            modelBuilder.Entity("CEntidades.Entidades.Persona", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("CEntidades.Entidades.Producto", b =>
                {
                    b.Navigation("OrdenDeVenta_Productos");
                });

            modelBuilder.Entity("CEntidades.Entidades.Proveedor", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("CEntidades.Entidades.Provincia", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("CEntidades.Entidades.Sector", b =>
                {
                    b.Navigation("Empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
